name: Schedule

# Controls when the action will run. 
on:       
  schedule:
  # Every 10 minutes
  # */10 * * * *  
  # Every Monday at 13:00
  # 0 13 * * 1
  # At 00:00 on Saturday
  # 0 0 * * 6 
  # Every 2nd day
  # 0 0 */2 * *  
  # On Tue, Thr, Sat
  # 0 0 * * 2,4,6 
  # On Mon, Tue, Wed, Thr, Fri
  # 0 2 * * 1,2,3,4,5
  - cron: "0 2 * * 1,2,3,4,5"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
            
      # Runs a set of commands using the runners shell
      - name: Run stock analyse
        run: |
          echo Start analyse...
          export MARKET_STACK_ACCESS_KEY=${{secrets.MARKET_STACK_ACCESS_KEY}}
          export MARKET_STACK_ACCESS_KEY2=${{secrets.MARKET_STACK_ACCESS_KEY2}}

          #Depot+DAX+Eurostoxx (70). Diese gehen nicht immer (AI3A SEJ1 PPB PER):
          symbolsVar='PSM XONA GEC GIS FTE TNE5 CRIN CCAP BEI CBK 1COV DBK LHA EOAN FME FRE HEI HEN IFX SDF MRK RWE TKA VOW MTX DWNI DHER ADS 1N8 AIL AIR ALV 1NBA ASME AXA BSD2 BAS BAYN BMW BNP DAI BSN DPW DTE ENL GZF ENI IBE1 IXD1 INN1 IES PPX AHOG PHI1 LOR LIN MOH MUV2 NOA3 1TY SNW SAP SND SIE TOTB SQU VVU VOW3 VNA'
          percentageVar=1
          queryVar=online
          ratedVar=underrated
          stochasticVar=9
          RSIVar=30

          chmod +x ./analyse.sh

          sh ./analyse.sh "$symbolsVar" $percentageVar $queryVar $ratedVar $stochasticVar $RSIVar

          git config user.email ${{secrets.MAIL_ADRESS}}
          git config user.name "Markus Hopf"
          git add data/*
          git commit -am "Github stock-analyse result ${{github.event_name}} ${{github.event.action}}" --allow-empty 
          git push 

      # Maximal 5 hardcoded screenshot. If this value is increased, then increase it in analyse.sh line 361 as well!
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/1.html
          destination: screenshot1.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot1
           
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/2.html
          destination: screenshot2.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot2
           
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/3.html
          destination: screenshot3.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot3
           
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/4.html
          destination: screenshot4.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot4
           
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/5.html
          destination: screenshot5.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot5

      # Compress screenshot.tar.gz at the end
      - shell: bash
        run: |  
          fileSize=$(stat -c %s screenshot1.png)
          if [ "${fileSize}" -gt "100000" ]; then
            fileList=$(echo $fileList "screenshot1.png")
          fi
          fileSize=$(stat -c %s screenshot2.png)
          if [ "${fileSize}" -gt "100000" ]; then
            fileList=$(echo $fileList "screenshot2.png")
          fi
          fileSize=$(stat -c %s screenshot3.png)
          if [ "${fileSize}" -gt "100000" ]; then
            fileList=$(echo $fileList "screenshot3.png")
          fi
          fileSize=$(stat -c %s screenshot4.png)
          if [ "${fileSize}" -gt "100000" ]; then
            fileList=$(echo $fileList "screenshot4.png")
          fi
          fileSize=$(stat -c %s screenshot5.png)
          if [ "${fileSize}" -gt "100000" ]; then
            fileList=$(echo $fileList "screenshot5.png")
          fi
          tar -zcf screenshot.tar.gz $fileList

      - name: Send result via email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.ionos.de
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}          
          subject: Github stock-analyse result ${{github.event_name}} ${{github.event.action}}
          # Literal body:
          #body: Build job of ${{github.repository}} completed successfully!
          # Read file contents as body:
          body: file://out/_result.html
          to: ${{secrets.MAIL_ADRESS}}
          from: Github stock-analyse # <githubÃ„hopf-...de>
          # Optional content type (defaults to text/plain):
          content_type: text/html          
          # Optional attachments:
          attachments: out/_out.tar.gz,screenshot.tar.gz
