name: Dev

env:
  symbolsEnv: 'CEC'
  percentageEnv: '1'
  queryEnv: 'offline'
  ratedEnv: 'underrated'
  stochasticEnv: '8'
  RSIEnv: '98'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  #pull_request:
    #branches: [ main ]

  # Can be triggered with cURL
  repository_dispatch:
    types: [curl] 
       
  # Can be triggered manually
  workflow_dispatch:
    inputs:
      symbolsParam:
        description: 'SYMBOLS - List of stock symbols like: "ADS ALV"'     
        required: true
        default: 'ADS'
      percentageParam:
        description: 'PERCENTAGE - "1" means 1 percent'     
        required: true
        default: '1'
      queryParam:
        description: 'QUERY - [online|offline]'     
        required: true
        default: 'offline'
      ratedParam:
        description: 'RATED - [overrated|underrated]. List low/underrated stocks'     
        required: true
        default: 'underrated'
      stochasticParam:
        description: 'STOCHASTIC14 - "9" means 9/91 percent (only single digit allowed!)'     
        required: true
        default: '9'
      RSIParam:
        description: 'RSI14 - "30" means 30/70 quote'     
        required: true
        default: '99'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - shell: bash
        run: |    
          sh ./script/install-bats.sh
          /home/runner/.local/bin/bats -version
          mkdir temp
          /home/runner/.local/bin/bats --tap script/*.bats
          #chmod +x ./test.sh
          #sh ./test.sh

      # Runs a set of commands using the runners shell
      - name: Run stock analyse
        run: |
          echo Start analyse...
          export MARKET_STACK_ACCESS_KEY=${{secrets.MARKET_STACK_ACCESS_KEY}}
          export MARKET_STACK_ACCESS_KEY2=${{secrets.MARKET_STACK_ACCESS_KEY2}}


          symbolsEnv=${{env.symbolsEnv}}  
          percentageEnv=${{env.percentageEnv}}  
          queryEnv=${{env.queryEnv}}
          ratedEnv=${{env.ratedEnv}}
          stochasticEnv=${{env.stochasticEnv}}
          RSIEnv=${{env.RSIEnv}}
          echo symbolsEnv $symbolsEnv
          echo percentageEnv $percentageEnv
          echo queryEnv $queryEnv
          echo ratedEnv $ratedEnv
          echo stochasticEnv $stochasticEnv
          echo RSIEnv $RSIEnv


          symbolsDefault='${{github.event.client_payload.symbols}}'   
          percentageDefault='${{github.event.client_payload.percentage}}'
          queryDefault='${{github.event.client_payload.query}}'
          ratedDefault='${{github.event.client_payload.rated}}'
          stochasticDefault='${{github.event.client_payload.stochastic}}'
          RSIDefault='${{github.event.client_payload.RSI}}'

          symbolsInput="${{github.event.inputs.symbolsParam}}"
          percentageInput=${{github.event.inputs.percentageParam}}
          queryInput=${{github.event.inputs.queryParam}}
          ratedInput=${{github.event.inputs.ratedParam}}
          stochasticInput=${{github.event.inputs.stochasticParam}}
          RSIInput=${{github.event.inputs.RSIParam}}
          
          symbolsVar=${symbolsInput:-$symbolsDefault}
          percentageVar=${percentageInput:-$percentageDefault}
          queryVar=${queryInput:-$queryDefault}
          ratedVar=${ratedInput:-$ratedDefault}          
          stochasticVar=${stochasticInput:-$stochasticDefault}          
          RSIVar=${RSIInput:-$RSIDefault}   

          symbolsVar=${symbolsVar:-$symbolsEnv}
          percentageVar=${percentageVar:-$percentageEnv}
          queryVar=${queryVar:-$queryEnv}
          ratedVar=${ratedVar:-$ratedEnv}          
          stochasticVar=${stochasticVar:-$stochasticEnv}          
          RSIVar=${RSIVar:-$RSIEnv}
          echo symbolsVar $symbolsVar
          echo percentageVar $percentageVar
          echo queryVar $queryVar
          echo ratedVar $ratedVar
          echo stochasticVar $stochasticVar
          echo RSIVar $RSIVar

          chmod +x ./analyse.sh

          sh ./analyse.sh "$symbolsVar" $percentageVar $queryVar $ratedVar $stochasticVar $RSIVar

          git config user.email ${{secrets.MAIL_ADRESS}}
          git config user.name "Markus Hopf"
          git add data/*
          git commit -am "Github stock-analyse result ${{github.event_name}} ${{github.event.action}}" --allow-empty 
          git push
           
      # Maximal 1 hardcoded screenshot. See analyse.sh line 361 as well!
      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/1.html
          destination: screenshot1.png
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot1


      - uses: swinton/screenshot-website@v1.x
        with:
          source: temp/2.html
          destination: screenshot2.png   
          full-page: true
      - name: Download Screenshot 
        uses: actions/download-artifact@v2
        with:
          name: screenshot2

      # Compress screenshot.tar.gz at the end
      - shell: bash
        run: |   
          ls -lisa *.png       
          tar -zcf screenshot.tar.gz screenshot1.png screenshot2.png



      # Compress screenshot.tar.gz at the end
      - shell: bash
        run: |          
          tar -zcf screenshot.tar.gz screenshot1.png
    
      - name: Send result via email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.ionos.de
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Github stock-analyse result ${{github.event_name}} ${{github.event.action}}
          # Literal body:
          #body: Build job of ${{github.repository}} completed successfully!
          # Read file contents as body:
          body: file://out/_result.html
          to: ${{secrets.MAIL_ADRESS}}
          from: Github stock-analyse # <githubÃ„hopf-...de>
          # Optional content type (defaults to text/plain):
          content_type: text/html          
          # Optional attachments:
          attachments: out/_out.tar.gz,screenshot.tar.gz
          
