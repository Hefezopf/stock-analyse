# Is triggered:
#   1. on each push
#   2. curl 
#   3. manuell 
name: Dev

env:
  symbolsEnv: '*ENI'
  percentageEnv: '1'
  queryEnv: 'offline'
  ratedEnv: 'all'
  stochasticEnv: '9'
  RSIEnv: '30'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, macd ]
  #pull_request:
    #branches: [ main ]

  # Can be triggered with cURL
  repository_dispatch:
    types: [curl] 
       
  # Can be triggered manually
  workflow_dispatch:
    inputs:
      symbolsParam:
        description: 'SYMBOLS - List of stock symbols like: "*GIS ADS". Own stocks marked *'
        required: true
        default: '*GIS ADS'
      percentageParam:
        description: 'PERCENTAGE - "1" means 1 percent'     
        required: true
        default: '1'
      queryParam:
        description: 'QUERY - [online|offline]'     
        required: true
        default: 'offline'
      ratedParam:
        description: 'RATED - [overrated|underrated|all]. List low/high/all stocks'     
        required: true
        default: 'all'
      stochasticParam:
        description: 'STOCHASTIC14 - "9" means 9/91 percent (only single digit allowed!)'     
        required: true
        default: '9'
      RSIParam:
        description: 'RSI14 - "30" means 30/70 quote. (only 30 and less allowed!)'
        required: true
        default: '30'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - shell: bash
        run: |    
          echo "Bats Test"
          sh ./script/install-bats.sh
          /home/runner/.local/bin/bats -version
          mkdir temp
          rm -rf test/_result.html
          /home/runner/.local/bin/bats --tap script/*.bats

      # Runs a set of commands using the runners shell
      - name: Run stock analyse
        run: |
          echo "Start analyse..."
          export MARKET_STACK_ACCESS_KEY1=${{secrets.MARKET_STACK_ACCESS_KEY1}}
          export MARKET_STACK_ACCESS_KEY2=${{secrets.MARKET_STACK_ACCESS_KEY2}}
          export MARKET_STACK_ACCESS_KEY3=${{secrets.MARKET_STACK_ACCESS_KEY3}}
          export MARKET_STACK_ACCESS_KEY4=${{secrets.MARKET_STACK_ACCESS_KEY4}}

          symbolsEnv=${{env.symbolsEnv}}
          percentageEnv=${{env.percentageEnv}}
          queryEnv=${{env.queryEnv}}
          ratedEnv=${{env.ratedEnv}}
          stochasticEnv=${{env.stochasticEnv}}
          RSIEnv=${{env.RSIEnv}}

          symbolsDefault='${{github.event.client_payload.symbols}}'
          percentageDefault='${{github.event.client_payload.percentage}}'
          queryDefault='${{github.event.client_payload.query}}'
          ratedDefault='${{github.event.client_payload.rated}}'
          stochasticDefault='${{github.event.client_payload.stochastic}}'
          RSIDefault='${{github.event.client_payload.RSI}}'

          symbolsInput="${{github.event.inputs.symbolsParam}}"
          percentageInput=${{github.event.inputs.percentageParam}}
          queryInput=${{github.event.inputs.queryParam}}
          ratedInput=${{github.event.inputs.ratedParam}}
          stochasticInput=${{github.event.inputs.stochasticParam}}
          RSIInput=${{github.event.inputs.RSIParam}}
          
          symbolsVar=${symbolsInput:-$symbolsDefault}
          percentageVar=${percentageInput:-$percentageDefault}
          queryVar=${queryInput:-$queryDefault}
          ratedVar=${ratedInput:-$ratedDefault}          
          stochasticVar=${stochasticInput:-$stochasticDefault}          
          RSIVar=${RSIInput:-$RSIDefault}   

          symbolsVar=${symbolsVar:-$symbolsEnv}
          percentageVar=${percentageVar:-$percentageEnv}
          queryVar=${queryVar:-$queryEnv}
          ratedVar=${ratedVar:-$ratedEnv}          
          stochasticVar=${stochasticVar:-$stochasticEnv}          
          RSIVar=${RSIVar:-$RSIEnv}

          chmod +x ./analyse.sh

          sh ./analyse.sh "$symbolsVar" $percentageVar $queryVar $ratedVar $stochasticVar $RSIVar

          git config user.email ${{secrets.MAIL_ADRESS}}
          git config user.name "Markus Hopf"
          git add data/*
          git commit -am "Github stock-analyse result ${{github.event_name}} ${{github.event.action}}" --allow-empty 
          git push
           
      # Maximal 3 hardcoded screenshot. See analyse.sh line 361 as well!
      # - uses: swinton/screenshot-website@v1.x
      #   with:
      #     source: temp/1.html
      #     destination: screenshot1.png
      #     full-page: true
      # - name: Download Screenshot 
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: screenshot1

      # - uses: swinton/screenshot-website@v1.x
      #   with:
      #     source: temp/2.html
      #     destination: screenshot2.png   
      #     full-page: true
      # - name: Download Screenshot 
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: screenshot2

      # - uses: swinton/screenshot-website@v1.x
      #   with:
      #     source: temp/3.html
      #     destination: screenshot3.png   
      #     full-page: true
      # - name: Download Screenshot 
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: screenshot3

      # # Compress screenshot.tar.gz at the end
      # - shell: bash
      #   run: |  
      #     echo "Tar Screenshots"
      #     i=1
      #     while [ "$i" -le 3 ];
      #     do
      #         fileSize=$(stat -c %s screenshot$i.png)
      #         if [ "${fileSize}" -gt 20000 ]; then              
      #           fileList=$(echo $fileList "screenshot$i.png")
      #         fi          
      #         i=$((i + 1))
      #     done
           tar -zcf screenshot.tar.gz $fileList
    
      - name: Send result via email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.ionos.de
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Github stock-analyse result ${{github.event_name}} ${{github.event.action}}
          # Literal body:
          #body: Build job of ${{github.repository}} completed successfully!
          # Read file contents as body:
          body: file://out/_result.html
          to: ${{secrets.MAIL_ADRESS}}
          from: Github stock-analyse # <githubÃ„hopf-...de>
          # Optional content type (defaults to text/plain):
          content_type: text/html          
          # Optional attachments:
          attachments: out/_out.tar.gz,screenshot.tar.gz
