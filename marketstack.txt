marketstack.com:
----------------

. ~/.bash_profile


TODO:
-----
-RSI und andere Beschleunigen!!!
-wenn REST online scheitert, nehme offline data
-evtl mehrere REST Key besorgen?
-Regelmäßig Daten als Backup aufheben
-Kaufstratigie aufschreiben. .Z.:B Nur einmal die Woche kaufen, oder nur wenn ganz klare Signale
-Alles in in einer Tickerdatei? 3 Spalten?
-Neue Strategie RSI und stock kombinieren
-Result Files löschen wenn mal falsches Symbol eingeben wurde, auch _ticker Eintrage vermeiden
-Ergebnisse nach upper case schreiben wenn lowercase eingegeben wurde
-MACD - Moving average convergence divergance (12,26,9)
-Werte werden reverted/gedreht, daher erstmal nur bis stochastik 9 auswerten
-( über weg nehmen)
-(Runden auf euro)
-(Auflösung: Symbol Ticker zu WKN)
-Besseres EMail Template
-unittest functions  
-(einbauen: ... XETRA&symbols=${symbol}&limit=1000")
-(Performance, wenn dann bei stochastik; in streams?)
-(Daten values*.txt cachen wenn vom gleichen Tag. Schneller!)
-(Warum ist nach 6 API REST Anfragen schluss, habe doch einen Key?)


REST Api
https://marketstack.com/dashboard
info@hopf-it.de
m*2-1


https://bsym.bloomberg.com:
---------------------------------
OpenFIGI API | OpenFIGI
https://bsym.bloomberg.com/api
Hefezopf
oM*2-1!
info@hopf-it.de

https://marketstack.com/usage
https://github.com/Hefezopf/stock-analyse/actions


https://www.chartjs.org/docs/latest/charts/line.html
https://www.chartjs.org/docs/latest/

https://www.openfigi.com/api#rate-limit

export X_OPENFIGI_APIKEY="X-OPENFIGI-APIKEY: 55c6c3ff-77a0-40a2-b1c4-23c636bc7ce3-1"
echo $X_OPENFIGI_APIKEY
export TICKER=IBM
curl 'https://api.openfigi.com/v2/mapping' --request POST --header 'Content-Type: application/json' --header 'echo ${X_OPENFIGI_APIKEY}' --data '[{"idType":"TICKER", "idValue":"'${TICKER}'"}]' | jq '.[0].data[0].name'


git config advice.addIgnoredFile false


sort -k 2 data/_ticker_names.txt > data/_ticker_names_sorted.txt


!!
Github Token for cURL:
cURL works only from unrestricted devices!

GITHUB_TOKEN=cbf8fa08a037b3d1e14c78fc5e991204861a2704-1
curl -H "Authorization: token $GITHUB_TOKEN" -H 'Accept: application/vnd.github.everest-preview+json' "https://api.github.com/repos/Hefezopf/stock-analyse/dispatches" -d '{"event_type": "curl", "client_payload": {"symbols": "MSF", "percentage": "1", "query": "offline", "rated": "underrated", "stochastic": "40"}'
!!


einpacken:
tar -zcvf _out.tar.gz out
auspacken:
tar -xvf _out.tar.gz
list:
tar -tvf out/_out.tar.gz


#stochasticQuoteList=", , , , , , , , , , 82, 55, 28, 62, 18, 29, 10, 61, 100, 100, 100, 100,"


start chrome "http://www.google.com/search?tbm=fin&q=ADS" "http://www.google.com/search?tbm=fin&q=ALV" 

BAYN
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=BAYN.XETRA" | jq '.data[0].volume'

DRW8
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=DRW8.XETRA" | jq '.data[].close'

AI3A
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=AI3A.XETRA" | jq '.data[].close'

https://www.google.com/search?q=MSF


https://github.com/Hefezopf/stock-analyse/actions

https://github.com/Hefezopf/stock-analyse

https://github.com/Hefezopf/stock-analyse.git


curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA" |  jq '.'

http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'
	
curl GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL' | jq '.'

jq:
---
https://stedolan.github.io/jq/
cat Xetra.json | jq '.data[].symbol'


MSF AMZ ABEC ABEA AHLA FB2A BRYN BRH VODJ 3V64 CMC JNJ WMT M4I NESM PRG SOBA UNH NCB HDI INL CCC3 BAC XONA WDP MOH 6MK CTP2 PFE PEP CHV ADB CIS NWT R6C R6C3 NVD NFC ORC BCO FOO LOR MDO SAP NOVC NKE ABL UNVB TRVC CTO 2M6 BRM TL0 4I1 4AB 2PP LLY HBC1 AMG ASMF ZEG SNW ASME ALD 1TY IBM NOVA TOTB 1YD LOM UNP 1NBA TII BPE CQD LIN BPE5 DAP GS7 IXD1 BIL AIR GIS GEC BMT SRB QCI AEC1 ENL ALV MMM VOW CVS GUI SIE KTF UPAB

https://github.com/dawidd6/action-send-mail

https://jqplay.org/jq?q=.%5B0%5D&j=%5B%7B%22name%22%3A%22JSON%22%2C%20%22good%22%3Atrue%7D%2C%20%7B%22name%22%3A%22XML%22%2C%20%22good%22%3Afalse%7D%5D

	
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=ALV.XETRA' | jq '.'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].name'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].close'
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA&search=' |  jq '.data[].close'


Cache:
cacheFile=$(find data/cache/${symbol}.values18.txt 2> /dev/null -mtime -1 -print)
if [ "${#cacheFile}" -gt 0 ]; then
	echo Read from cache file
	cp data/cache/${symbol}.values18.txt out/values18.txt
else
	echo Create cache file
	head -n18 data/${symbol}.txt > data/cache/${symbol}.values18.txt
	cp data/cache/${symbol}.values18.txt out/values18.txt
fi

