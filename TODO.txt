TODO:
-----


. ~/.bash_profile


out/commaPriceListFile.txt
out/stochastic.txt
out/RSI_WinningDays.txt
-Temp ordner
-scripts ordner
-Result.html favicon
-Beschreibung wie vorgegehne wenn kauf: ins musterdepot, in schedule liste, ...
-Nach oben/overrated auch Alarme wie nach unten z.b. RSI
-link in consle auf out file zum direkten klicken
-chart.js not working on iphone
	https://www.google.de/search?q=chart.js+not+working+on+iphone&ie=UTF-8&oe=UTF-8&hl=de-de&client=safari
-Get data zusammen mit Analyse in Schleife um get data zu entzerren
-Country mit betrachten beim Namen curl
-Wann wird Kurs von XETRA aktuallisiert? Um 22:39 war der Kurs noch alt! um 1 Uhr Nachts neu
-Parameter in Chart unten mit ausgeben; wie im Result file
-RSI und andere Beschleunigen!!!
-printf verwenden?
-Evtl Schalter overrated und underrated aus 
-Strategie zum Verkauf einbauen?
-CMD Parameter Symbols an erster Stelle
-Regelmäßig Daten als Backup aufheben
-Kaufstratigie aufschreiben. Z.:B Nur einmal die Woche kaufen, oder nur wenn ganz klare Signale
-Alles in einer Tickerdatei? 3 Spalten?
-Letzter Kurs Datum in 2.ter Spalte Symbol.txt
-Weitere Strategie RSI und Stock kombinieren
-MACD - Moving average convergence divergance (12,26,9)
-Werte werden reverted/gedreht, daher erstmal nur bis stochastik 9 auswerten
-(über weg nehmen)
-(Runden auf euro)
-(Auflösung: Symbol Ticker zu WKN)
-Besseres EMail Template
-unittest functions  


Depot:
./analyse.sh 'SNW PSM CEC XONA GEC GIS B4B FTE TNE5 CRIN CCAP BEI DBK EOAN BAYN BSN ENI' 1 offline underrated 9 90
Depot+DAX+Eurostoxx (70):
./analyse.sh 'SNW PSM CEC XONA GEC GIS B4B FTE TNE5 CRIN CCAP BEI DBK EOAN BAYN BSN ENI CBK 1COV DBK LHA FME FRE HEI HEN IFX SDF MRK RWE TKA VOW MTX DWNI DHER ADS 1N8 AIL AIR ALV 1NBA ASME AXA BSD2 BAS BAYN BMW BNP DAI BSN DPW DTE ENL GZF ENI IBE1 IXD1 INN1 IES PPX AHOG PHI1 LOR LIN MOH MUV2 NOA3 1TY SNW SAP SND SIE TOTB SQU VVU VOW3 VNA' 1 offline underrated 9 90


REST Api
https://marketstack.com/dashboard
info@hopf-it.de
m*2-1
markus@hopf-it.de
m*2-1


https://bsym.bloomberg.com:
---------------------------------
OpenFIGI API | OpenFIGI
https://bsym.bloomberg.com/api
Hefezopf
oM*2-1!
info@hopf-it.de

https://marketstack.com/usage
https://github.com/Hefezopf/stock-analyse/actions


https://www.chartjs.org/docs/latest/charts/line.html
https://www.chartjs.org/docs/latest/

export MARKET_STACK_ACCESS_KEY="55c6c3ff-77a0-40a2-b1c4-23c636bc7ce3-1"
export MARKET_STACK_ACCESS_KEY2="f70ea4e0135d55aa08c920c800c26cb5-1"

https://www.openfigi.com/api#rate-limit

export X_OPENFIGI_APIKEY="X-OPENFIGI-APIKEY: 55c6c3ff-77a0-40a2-b1c4-23c636bc7ce3-1"
echo $X_OPENFIGI_APIKEY
export TICKER=IBM
curl 'https://api.openfigi.com/v2/mapping' --request POST --header 'Content-Type: application/json' --header 'echo ${X_OPENFIGI_APIKEY}' --data '[{"idType":"TICKER", "idValue":"'${TICKER}'"}]' | jq '.[0].data[0].name'


git config advice.addIgnoredFile false

sort -k 2 data/_ticker_names.txt > data/_ticker_names_sorted.txt

cat data/_ticker_idnotation.txt | sort | uniq -c | grep "2 "


!!
Github Token for cURL:
cURL works only from unrestricted devices!

GITHUB_TOKEN=cbf8fa08a037b3d1e14c78fc5e991204861a2704-1
curl -H "Authorization: token $GITHUB_TOKEN" -H 'Accept: application/vnd.github.everest-preview+json' "https://api.github.com/repos/Hefezopf/stock-analyse/dispatches" -d '{"event_type": "curl", "client_payload": {"symbols": "MSF", "percentage": "1", "query": "offline", "rated": "underrated", "stochastic": "40"}'
!!


einpacken:
tar -zcvf _out.tar.gz out
auspacken:
tar -xvf _out.tar.gz
list:
tar -tvf out/_out.tar.gz


#stochasticQuoteList=", , , , , , , , , , 82, 55, 28, 62, 18, 29, 10, 61, 100, 100, 100, 100,"


start chrome "http://www.google.com/search?tbm=fin&q=ADS" "http://www.google.com/search?tbm=fin&q=ALV" 

BAYN
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=BAYN.XETRA" | jq '.data[0].volume'

DRW8
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=DRW8.XETRA" | jq '.data[].close'

AI3A
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=AI3A.XETRA" | jq '.data[].close'

https://www.google.com/search?q=MSF


https://github.com/Hefezopf/stock-analyse/actions

https://github.com/Hefezopf/stock-analyse

https://github.com/Hefezopf/stock-analyse.git


curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA" |  jq '.'

http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'
	
curl GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL' | jq '.'

jq:
---
https://stedolan.github.io/jq/
cat Xetra.json | jq '.data[].symbol'


MSF AMZ ABEC ABEA AHLA FB2A BRYN BRH VODJ 3V64 CMC JNJ WMT M4I NESM PRG SOBA UNH NCB HDI INL CCC3 BAC XONA WDP MOH 6MK CTP2 PFE PEP CHV ADB CIS NWT R6C R6C3 NVD NFC ORC BCO FOO LOR MDO SAP NOVC NKE ABL UNVB TRVC CTO 2M6 BRM TL0 4I1 4AB 2PP LLY HBC1 AMG ASMF ZEG SNW ASME ALD 1TY IBM NOVA TOTB 1YD LOM UNP 1NBA TII BPE CQD LIN BPE5 DAP GS7 IXD1 BIL AIR GIS GEC BMT SRB QCI AEC1 ENL ALV MMM VOW CVS GUI SIE KTF UPAB

https://github.com/dawidd6/action-send-mail

https://jqplay.org/jq?q=.%5B0%5D&j=%5B%7B%22name%22%3A%22JSON%22%2C%20%22good%22%3Atrue%7D%2C%20%7B%22name%22%3A%22XML%22%2C%20%22good%22%3Afalse%7D%5D

	
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=ALV.XETRA' | jq '.'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].name'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].close'
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA&search=' |  jq '.data[].close'


Cache:
cacheFile=$(find data/cache/${symbol}.values18.txt 2> /dev/null -mtime -1 -print)
if [ "${#cacheFile}" -gt 0 ]; then
	echo Read from cache file
	cp data/cache/${symbol}.values18.txt temp/values18.txt
else
	echo Create cache file
	head -n18 data/${symbol}.txt > data/cache/${symbol}.values18.txt
	cp data/cache/${symbol}.values18.txt temp/values18.txt
fi


# RSIOfDays function:
# Input is amountOfDaysParam($1)
# Output: RSIQuoteList is comma separated list
RSIOfDays() {
	amountOfDaysParam=${1}
	i=1
	while [ "$i" -le 100 ];
	do
	    i=$(( i + 1 ))
		diffLast2Prices=$(head -n$i data/${symbol}.txt | tail -2 | awk 'p{print p-$0}{p=$0}' )
		isNegativ=$(echo "${diffLast2Prices}" | awk '{print substr ($0, 0, 1)}')
		if [ ! ${isNegativ} = '-' ]; then
			RSIwinningDays=$(echo -e $RSIwinningDays $diffLast2Prices"")
		else
		    RSIwinningDays=$(echo $RSIwinningDays "0")	
		fi

		if [ ${isNegativ} = '-' ]; then
		    withoutMinusSign=$(echo "${diffLast2Prices}" | awk '{print substr ($1, 2, 9)}')
			RSIloosingDays=$(echo -e $RSIloosingDays $withoutMinusSign"")
		else
		    RSIloosingDays=$(echo $RSIloosingDays "0")	
		fi
	done

	i=1
	while [ "$i" -le 100 ];
	do
	    i=$(( i + 1 ))

		# Fill with blank comma seperated data  
		if [ $i -lt $((amountOfDaysParam + 1 )) ]; then  # <14
			RSIQuoteList=$(echo $RSIQuoteList ",")
		else # >14
			indBegin=$(( 100+2-i ))
			indEnd=$(( indBegin+1+amountOfDaysParam ))		
			RSIwinningDaysGap=$(echo "$RSIwinningDays" | cut -f $indBegin-$indEnd -d ' ')	
		    RSIloosingDaysGap=$(echo "$RSIloosingDays" | cut -f $indBegin-$indEnd -d ' ')	

			OLDIFS=$IFS
			IFS=" " set -- $RSIwinningDaysGap
			RSIwinningDaysAvg=$(echo "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" | awk '{print ('${1}'+'${2}'+'${3}'+'${4}'+'${5}'+'${6}'+'${7}'+'${8}'+'${9}'+'${10}'+'${11}'+'${12}'+'${13}'+'${14}')/'${amountOfDaysParam}'}')
			IFS=" " set -- $RSIloosingDaysGap
			RSIloosingDaysAvg=$(echo "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" | awk '{print ('${1}'+'${2}'+'${3}'+'${4}'+'${5}'+'${6}'+'${7}'+'${8}'+'${9}'+'${10}'+'${11}'+'${12}'+'${13}'+'${14}')/'${amountOfDaysParam}'}')
			IFS=$OLDIFS

	        #RSIwinningDaysAvg=$(tail -"${i}" $RSIwinningDaysFile | head -n"${1}" | awk '{ sum += $1; } END { print sum/'${1}'; }')
			#RSIloosingDaysAvg=$(tail -"${i}" $RSIloosingDaysFile | head -n$amountOfDaysParam | awk '{ sum += $1; } END { print sum/'$amountOfDaysParam'; }') 
			if [ "${RSIloosingDaysAvg}" = 0 ]; then
				RSIQuote=100
			else
				RSIQuote=$(echo "$RSIwinningDaysAvg $RSIloosingDaysAvg" | awk '{print 100-(100/(1+($1/$2)))}')
				#RSIQuote=$(echo "$RSIwinningDaysAvg" "$RSIloosingDaysAvg" | awk '{print 100*$1/($1+$2)}')
			fi

			RoundNumber ${RSIQuote} 0; RSIQuote=$?	
			RSIQuoteList=$(echo $RSIQuoteList $RSIQuote",")			
		fi
	done
}
