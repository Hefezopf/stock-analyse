TODO:
-----

. ~/.bash_profile
. /C/Users/xcg4444/.bash_profile
git config --global http.sslVerify false


-Evtl. stark fallend, stark steigend einbauen, also 5 Zustände!

-Bei der Tendency Strategie sind doch nicht alle 3 Varianten nötig? Mind 1 ist doppelt.

-ENUMs einführen?
-Dynamic Analyse: Alarme je nach 100 Tage Linie anpassen 
-Wenn dyn., dann braucht man kein oberes und unteres RSI und Stoch Limit 

-Evtl. horizontal MACD verbesssern, so das nicht die ganz geraden Wendepunkte alarmiert werden. Also nur wenn von steil kommend!
-MACD horizontal überarbeiten/neue Strategie: wenn MACD von steil in die Horizontale geht - Prozente berechnen
    z.b.: PPX.html pos 35 am 5.2.2021. Hier kann man die Abflachung gut sehen.
    MACD von -8,77 auf -11,44 sind 30% minus und auf -13,49 sind 17% minus und dann auf -14,25 sind 5 % minus.
-Evtl. Neue Stoch Strategie wenn 6 (oder x) unter den letzten Werten unter dem Schwellwert
-Evtl. die Ersten 18 Kursdaten nicht darstellen, wegen sonst gestauchter x-Achse 
-Evtl. History in Diagrammen mit aufnehmen. Z.b. anstatt 1..100 in X Achse -> PS oder R oder M als Kürzel der Strategien
-Konstanten für green und red?
-Wie kann ich die Umschichtungen im Depot besser pflegen ohne commit? ENV?
-Simulation einer Strategie Mit Geld
-Beschleunigen durch weniger als 100 Tage?
-Eine Strategie für Stoch, RSI und MACD zusammen?
-Die Strategie Stoch, RSI überdenken?
-MACD signal line?
-MACD Histogramm line?
-12 Durchschnitt einzeichnen?
-26 Durchschnitt einzeichnen?
-Cache Dateien für jedes Symbol anlegen!! Performance!
-SSD Platte einbauen?
-Regelmäßig Daten als Backup aufheben
-Besseres EMail Template
-Evtl mehr wie 3 Werte in MACD Bewertung/Alarm einbeziehen 4 Werte? -> Nachkauf? zu kompliziert

Vorhandene Strategieren:
    RSI StrategieOverrated3HighRSI
    Percentage/Stochastic StrategieOverratedByPercentAndStochastic
    Stochastic StrategieOverrated3HighStochastic
    Stochastic/RSI StrategieOverratedHighStochasticHighRSIHighMACD
    MACD StrategieOverratedHighHorizontalMACD

Speed up:
bash: Run as Admin bash 
PC
C:\Windows\System32\cmd.exe /C powershell "Start-Process D:\Programme\Git\git-bash.exe -Verb RunAs"
Laptop
C:\WINDOWS\system32\cmd.exe /C powershell "Start-Process C:\Programme\Git\git-bash.exe -Verb RunAs"


sort -k 1 data/_ticker_idnotation.txt > data/_ticker_idnotation_sorted.txt
sort -k 1 data/_ticker_names.txt > data/_ticker_names_sorted.txt 


https://www.shellcheck.net
chocolatey
install with choco
Powershell as admin 
    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
shellcheck functions.sh
cat functions.sh | tr -d '\r' > functions1.sh
shellcheck --exclude=SC2039 script/functions.sh
shellcheck --shell=bash script/functions.sh
./test.sh


REST Api
https://marketstack.com/dashboard
info@hopf-it.de
m*2-1
markus@hopf-it.de
m*2-1
trainer@hopf-it.de
m*2-1
github@hopf-it.de
m*2-1



https://bsym.bloomberg.com:
---------------------------------
OpenFIGI API | OpenFIGI
https://bsym.bloomberg.com/api
Hefezopf
oM*2-1!
info@hopf-it.de

https://marketstack.com/usage
https://github.com/Hefezopf/stock-analyse/actions


https://www.chartjs.org/docs/latest/charts/line.html
https://www.chartjs.org/docs/latest/


export X_OPENFIGI_APIKEY="X-OPENFIGI-APIKEY:55c6c3ff-77a0-40a2-b1c4-23c636bc7ce3-1"

export MARKET_STACK_ACCESS_KEY1="a310b2410e8ca3c818a281b4eca0b86f-0"
export MARKET_STACK_ACCESS_KEY2="f70ea4e0135d55aa08c920c800c26cb5-1"
export MARKET_STACK_ACCESS_KEY3="5de6ae7da6a17492cac55a4a8383b851-1"
export MARKET_STACK_ACCESS_KEY4="a128320aba7f109f98ef2c6ea61017c8-1"


https://www.openfigi.com/api#rate-limit

export X_OPENFIGI_APIKEY="X-OPENFIGI-APIKEY:55c6c3ff-77a0-40a2-b1c4-23c636bc7ce3-1"
echo $X_OPENFIGI_APIKEY
export TICKER=IBM
curl 'https://api.openfigi.com/v2/mapping' --request POST --header 'Content-Type: application/json' --header 'echo ${X_OPENFIGI_APIKEY}' --data '[{"idType":"TICKER", "idValue":"'${TICKER}'"}]' | jq '.[0].data[0].name'


git config advice.addIgnoredFile false

sort -k 2 data/_ticker_names.txt > data/_ticker_names_sorted.txt

cat data/_ticker_idnotation.txt | sort | uniq -c | grep "2 "


!!
Github Token for cURL:
cURL works only from unrestricted devices!

GITHUB_TOKEN=cbf8fa08a037b3d1e14c78fc5e991204861a2704-1
curl -H "Authorization: token $GITHUB_TOKEN" -H 'Accept: application/vnd.github.everest-preview+json' "https://api.github.com/repos/Hefezopf/stock-analyse/dispatches" -d '{"event_type": "curl", "client_payload": {"symbols": "MSF", "percentage": "1", "query": "offline", "rated": "underrated", "stochastic": "40"}'
!!


start chrome "http://www.google.com/search?tbm=fin&q=ADS" "http://www.google.com/search?tbm=fin&q=ALV" 

BAYN
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=BAYN.XETRA" | jq '.data[0].volume'

DRW8
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=DRW8.XETRA" | jq '.data[].close'

AI3A
curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=AI3A.XETRA" | jq '.data[].close'

https://www.google.com/search?q=MSF


https://github.com/Hefezopf/stock-analyse/actions

https://github.com/Hefezopf/stock-analyse

https://github.com/Hefezopf/stock-analyse.git


curl --location --request GET "http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA" |  jq '.'

http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'
    
export MARKET_STACK_ACCESS_KEY="a128320aba7f109f98ef2c6ea61017c8-1"    
curl GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL'

curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&symbols=AAPL' | jq '.'

jq:
---
https://stedolan.github.io/jq/
cat Xetra.json | jq '.data[].symbol'


MSF AMZ ABEC ABEA AHLA FB2A BRYN BRH VODJ CMC JNJ WMT M4I NESM SOBA UNH NCB HDI INL CCC3 BAC XONA MOH 6MK CTP2 PFE PEP CHV ADB CIS NWT R6C R6C3 NVD NFC ORC BCO FOO LOR MDO SAP NOVC NKE ABL UNVB TRVC CTO 2M6 BRM TL0 4I1 4AB 2PP LLY HBC1 AMG ASMF ZEG SNW ASME 1TY IBM NOVA TOTB 1YD LOM UNP 1NBA TII BPE CQD LIN BPE5 DAP GS7 IXD1 BIL AIR GIS GEC BMT SRB QCI AEC1 ENL ALV MMM CVS GUI SIE KTF UPAB

https://github.com/dawidd6/action-send-mail

https://jqplay.org/jq?q=.%5B0%5D&j=%5B%7B%22name%22%3A%22JSON%22%2C%20%22good%22%3Atrue%7D%2C%20%7B%22name%22%3A%22XML%22%2C%20%22good%22%3Afalse%7D%5D

    
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=ALV.XETRA' | jq '.'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].name'
curl --location --request GET 'http://api.marketstack.com/v1/eod?access_key=${MARKET_STACK_ACCESS_KEY}&exchange=XETRA&symbols=VOW.XETRA' |  jq '.data[].close'
curl --location --request GET 'https://marketstack.com/stock_api.php?offset=0&exchange=XETRA&search=' |  jq '.data[].close'





#if [ "$(uname)" = 'Linux' ]; then
    #myarray=($myvar)
    #echo llllllllllllllllllllllll linux!!
    #averagePricemacd12Array=($averagePricemacd12List)
    #averagePricemacd26Array=($averagePricemacd26List)
#else
    #echo wwwwwwwwwwwwwwwwwwwwww windows!!
    #averagePricemacd12Array=(${averagePricemacd12List//', '/ })
    #averagePricemacd26Array=(${averagePricemacd26List//', '/ })
#fi

# for k in "${!averagePricemacd26Array[@]}"
# do
#     differ=$(echo "${averagePricemacd12Array[$k+14]} ${averagePricemacd26Array[$k]}" | awk '{print ($1 - $2)}')
#     #echo differ "$differ"
#     macdList="$macdList $differ,"
# done
macdList=" , , , , , , , , , , , , , , , , , , , , , , , , , $macdList"
echo macdList "$macdList"




# Cut comma, like: ",22" -> "22"        
# v1=$(echo "$1")
# value1=${v1:1:2}
# v2=$(echo "$2")
# value2=${v2:1:2}
# v3=$(echo "$3")
# value3=${v3:1:2}   

value1=$(echo "$1" | cut -b 2-3)
value2=$(echo "$2" | cut -b 2-3)
value3=$(echo "$3" | cut -b 2-3)



# RSIOfDays function:
# Input is amountOfDaysParam($1)
# Output: RSIQuoteList is comma separated list
RSIOfDays() {
    amountOfDaysParam=${1}
    i=1
    while [ "$i" -le 100 ];
    do
        i=$(( i + 1 ))
        diffLast2Prices=$(head -n$i data/${symbol}.txt | tail -2 | awk 'p{print p-$0}{p=$0}' )
        isNegativ=$(echo "${diffLast2Prices}" | awk '{print substr ($0, 0, 1)}')
        if [ ! ${isNegativ} = '-' ]; then
            RSIwinningDays=$(echo -e $RSIwinningDays $diffLast2Prices"")
        else
            RSIwinningDays=$(echo $RSIwinningDays "0")    
        fi

        if [ ${isNegativ} = '-' ]; then
            withoutMinusSign=$(echo "${diffLast2Prices}" | awk '{print substr ($1, 2, 9)}')
            RSIloosingDays=$(echo -e $RSIloosingDays $withoutMinusSign"")
        else
            RSIloosingDays=$(echo $RSIloosingDays "0")    
        fi
    done

    i=1
    while [ "$i" -le 100 ];
    do
        i=$(( i + 1 ))

        # Fill with blank comma seperated data  
        if [ $i -lt $((amountOfDaysParam + 1 )) ]; then  # <14
            RSIQuoteList=$(echo $RSIQuoteList ",")
        else # >14
            indBegin=$(( 100+2-i ))
            indEnd=$(( indBegin+1+amountOfDaysParam ))        
            RSIwinningDaysGap=$(echo "$RSIwinningDays" | cut -f $indBegin-$indEnd -d ' ')    
            RSIloosingDaysGap=$(echo "$RSIloosingDays" | cut -f $indBegin-$indEnd -d ' ')    

            OLDIFS=$IFS
            IFS=" " set -- $RSIwinningDaysGap
            RSIwinningDaysAvg=$(echo "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" | awk '{print ('${1}'+'${2}'+'${3}'+'${4}'+'${5}'+'${6}'+'${7}'+'${8}'+'${9}'+'${10}'+'${11}'+'${12}'+'${13}'+'${14}')/'${amountOfDaysParam}'}')
            IFS=" " set -- $RSIloosingDaysGap
            RSIloosingDaysAvg=$(echo "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" | awk '{print ('${1}'+'${2}'+'${3}'+'${4}'+'${5}'+'${6}'+'${7}'+'${8}'+'${9}'+'${10}'+'${11}'+'${12}'+'${13}'+'${14}')/'${amountOfDaysParam}'}')
            IFS=$OLDIFS

            #RSIwinningDaysAvg=$(tail -"${i}" $RSIwinningDaysFile | head -n"${1}" | awk '{ sum += $1; } END { print sum/'${1}'; }')
            #RSIloosingDaysAvg=$(tail -"${i}" $RSIloosingDaysFile | head -n$amountOfDaysParam | awk '{ sum += $1; } END { print sum/'$amountOfDaysParam'; }') 
            if [ "${RSIloosingDaysAvg}" = 0 ]; then
                RSIQuote=100
            else
                RSIQuote=$(echo "$RSIwinningDaysAvg $RSIloosingDaysAvg" | awk '{print 100-(100/(1+($1/$2)))}')
                #RSIQuote=$(echo "$RSIwinningDaysAvg" "$RSIloosingDaysAvg" | awk '{print 100*$1/($1+$2)}')
            fi

            RoundNumber ${RSIQuote} 0; RSIQuote=$?    
            RSIQuoteList=$(echo $RSIQuoteList $RSIQuote",")            
        fi
    done
}
